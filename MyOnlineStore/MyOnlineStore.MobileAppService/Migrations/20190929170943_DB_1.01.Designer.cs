// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyOnlineStore.MobileAppService.Context;

namespace MyOnlineStore.MobileAppService.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20190929170943_DB_1.01")]
    partial class DB_101
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyOnlineStore.Shared.Models.Audits.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("KeyValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("MyOnlineStore.Shared.Models.Purchases.ProductItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<Guid>("MyStoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MyStoreId");

                    b.ToTable("ProductItems");
                });

            modelBuilder.Entity("MyOnlineStore.Shared.Models.RoleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RolesTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Store Manager"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Employee"
                        });
                });

            modelBuilder.Entity("MyOnlineStore.Shared.Models.Roles.Role", b =>
                {
                    b.Property<Guid>("MyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("BussinesName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MyUserId", "RoleReferenceId");

                    b.HasIndex("RoleReferenceId");

                    b.ToTable("UsersRoles");
                });

            modelBuilder.Entity("MyOnlineStore.Shared.Models.Stores.FavoriteStoreClient", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "StoreId");

                    b.HasIndex("StoreId");

                    b.ToTable("ClientsFavoriteStores");
                });

            modelBuilder.Entity("MyOnlineStore.Shared.Models.Stores.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("MyOnlineStore.Shared.Models.Stores.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreOwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("MyOnlineStore.Shared.Models.Stores.StoreEmployee", b =>
                {
                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StoreId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("StoresEmployees");
                });

            modelBuilder.Entity("MyOnlineStore.Shared.Models.Users.BaseUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseUser");
                });

            modelBuilder.Entity("MyOnlineStore.Shared.Models.Users.UserCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Exp")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MyUserId");

                    b.ToTable("UsersCards");
                });

            modelBuilder.Entity("MyOnlineStore.Shared.Models.Users.ClientUser", b =>
                {
                    b.HasBaseType("MyOnlineStore.Shared.Models.Users.BaseUser");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("ClientUser");
                });

            modelBuilder.Entity("MyOnlineStore.Shared.Models.Users.EmployeeUser", b =>
                {
                    b.HasBaseType("MyOnlineStore.Shared.Models.Users.ClientUser");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("EmployeeUser");
                });

            modelBuilder.Entity("MyOnlineStore.Shared.Models.Users.AdminUser", b =>
                {
                    b.HasBaseType("MyOnlineStore.Shared.Models.Users.EmployeeUser");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("AdminUser");
                });

            modelBuilder.Entity("MyOnlineStore.Shared.Models.Purchases.ProductItem", b =>
                {
                    b.HasOne("MyOnlineStore.Shared.Models.Stores.Store", "MyStore")
                        .WithMany("MyProducts")
                        .HasForeignKey("MyStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyOnlineStore.Shared.Models.Roles.Role", b =>
                {
                    b.HasOne("MyOnlineStore.Shared.Models.Users.EmployeeUser", "MyUser")
                        .WithMany("Roles")
                        .HasForeignKey("MyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyOnlineStore.Shared.Models.RoleType", "RoleReference")
                        .WithMany("Roles")
                        .HasForeignKey("RoleReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyOnlineStore.Shared.Models.Stores.FavoriteStoreClient", b =>
                {
                    b.HasOne("MyOnlineStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyOnlineStore.Shared.Models.Users.ClientUser", "Client")
                        .WithMany("FavoriteStores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyOnlineStore.Shared.Models.Stores.Store", b =>
                {
                    b.HasOne("MyOnlineStore.Shared.Models.Stores.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("MyOnlineStore.Shared.Models.Stores.StoreEmployee", b =>
                {
                    b.HasOne("MyOnlineStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyOnlineStore.Shared.Models.Users.EmployeeUser", "EmployeeUser")
                        .WithMany("MyWorkStore")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyOnlineStore.Shared.Models.Users.UserCard", b =>
                {
                    b.HasOne("MyOnlineStore.Shared.Models.Users.ClientUser", null)
                        .WithMany("UserCards")
                        .HasForeignKey("MyUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
